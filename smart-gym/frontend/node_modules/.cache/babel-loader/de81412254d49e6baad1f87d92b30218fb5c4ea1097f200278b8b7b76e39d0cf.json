{"ast":null,"code":"const express = require(\"express\");\nconst sqlite3 = require(\"sqlite3\").verbose();\nconst cors = require(\"cors\");\nconst bodyParser = require(\"body-parser\");\nconst app = express();\napp.use(cors());\napp.use(bodyParser.json());\nconst db = new sqlite3.Database(\"./userdb.db\", err => {\n  if (err) {\n    console.error(\"Error connecting to SQLite database:\", err);\n  } else {\n    console.log(\"Connected to SQLite database\");\n  }\n});\napp.get(\"/api/data\", (req, res) => {\n  db.all(\"SELECT id, email FROM users\", [], (err, rows) => {\n    if (err) {\n      res.status(500).json({\n        message: \"Server error\"\n      });\n    } else {\n      res.json(rows);\n    }\n  });\n});\napp.post(\"/register\", (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  if (!email || !password) {\n    return res.status(400).json({\n      message: \"All fields are required\"\n    });\n  }\n  const query = \"INSERT INTO users (email, password) VALUES (?, ?)\";\n  db.run(query, [email, password], function (err) {\n    if (err) {\n      return res.status(500).json({\n        message: \"User registration failed\"\n      });\n    }\n    res.status(201).json({\n      message: \"User registered successfully\",\n      userId: this.lastID\n    });\n  });\n});\napp.listen(3000, () => {\n  console.log(\"Server running on port 3000\");\n});","map":{"version":3,"names":["express","require","sqlite3","verbose","cors","bodyParser","app","use","json","db","Database","err","console","error","log","get","req","res","all","rows","status","message","post","email","password","body","query","run","userId","lastID","listen"],"sources":["/Users/ericlarwa/Desktop/SmartGym/group-project-smart-gym-companion-application/smart-gym/src/backend/server.js"],"sourcesContent":["const express = require(\"express\");\nconst sqlite3 = require(\"sqlite3\").verbose();\nconst cors = require(\"cors\");\nconst bodyParser = require(\"body-parser\");\n\nconst app = express();\napp.use(cors());\napp.use(bodyParser.json());\n\nconst db = new sqlite3.Database(\"./userdb.db\", (err) => {\n    if (err) {\n        console.error(\"Error connecting to SQLite database:\", err);\n    } else {\n        console.log(\"Connected to SQLite database\");\n    }\n});\n\n\napp.get(\"/api/data\", (req, res) => {\n    db.all(\"SELECT id, email FROM users\", [], (err, rows) => {\n        if (err) {\n            res.status(500).json({ message: \"Server error\" });\n        } else {\n            res.json(rows);\n        }\n    });\n});\n\napp.post(\"/register\", (req, res) => {\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n        return res.status(400).json({ message: \"All fields are required\" });\n    }\n\n    const query = \"INSERT INTO users (email, password) VALUES (?, ?)\";\n    db.run(query, [email, password], function (err) {\n        if (err) {\n            return res.status(500).json({ message: \"User registration failed\" });\n        }\n        res.status(201).json({ message: \"User registered successfully\", userId: this.lastID });\n    });\n});\n\n\napp.listen(3000, () => {\n    console.log(\"Server running on port 3000\");\n});\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAS,CAAC,CAACE,OAAO,CAAC,CAAC;AAC5C,MAAMC,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMI,UAAU,GAAGJ,OAAO,CAAC,aAAa,CAAC;AAEzC,MAAMK,GAAG,GAAGN,OAAO,CAAC,CAAC;AACrBM,GAAG,CAACC,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;AACfE,GAAG,CAACC,GAAG,CAACF,UAAU,CAACG,IAAI,CAAC,CAAC,CAAC;AAE1B,MAAMC,EAAE,GAAG,IAAIP,OAAO,CAACQ,QAAQ,CAAC,aAAa,EAAGC,GAAG,IAAK;EACpD,IAAIA,GAAG,EAAE;IACLC,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEF,GAAG,CAAC;EAC9D,CAAC,MAAM;IACHC,OAAO,CAACE,GAAG,CAAC,8BAA8B,CAAC;EAC/C;AACJ,CAAC,CAAC;AAGFR,GAAG,CAACS,GAAG,CAAC,WAAW,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC/BR,EAAE,CAACS,GAAG,CAAC,6BAA6B,EAAE,EAAE,EAAE,CAACP,GAAG,EAAEQ,IAAI,KAAK;IACrD,IAAIR,GAAG,EAAE;MACLM,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACZ,IAAI,CAAC;QAAEa,OAAO,EAAE;MAAe,CAAC,CAAC;IACrD,CAAC,MAAM;MACHJ,GAAG,CAACT,IAAI,CAACW,IAAI,CAAC;IAClB;EACJ,CAAC,CAAC;AACN,CAAC,CAAC;AAEFb,GAAG,CAACgB,IAAI,CAAC,WAAW,EAAE,CAACN,GAAG,EAAEC,GAAG,KAAK;EAChC,MAAM;IAAEM,KAAK;IAAEC;EAAS,CAAC,GAAGR,GAAG,CAACS,IAAI;EAEpC,IAAI,CAACF,KAAK,IAAI,CAACC,QAAQ,EAAE;IACrB,OAAOP,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACZ,IAAI,CAAC;MAAEa,OAAO,EAAE;IAA0B,CAAC,CAAC;EACvE;EAEA,MAAMK,KAAK,GAAG,mDAAmD;EACjEjB,EAAE,CAACkB,GAAG,CAACD,KAAK,EAAE,CAACH,KAAK,EAAEC,QAAQ,CAAC,EAAE,UAAUb,GAAG,EAAE;IAC5C,IAAIA,GAAG,EAAE;MACL,OAAOM,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACZ,IAAI,CAAC;QAAEa,OAAO,EAAE;MAA2B,CAAC,CAAC;IACxE;IACAJ,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACZ,IAAI,CAAC;MAAEa,OAAO,EAAE,8BAA8B;MAAEO,MAAM,EAAE,IAAI,CAACC;IAAO,CAAC,CAAC;EAC1F,CAAC,CAAC;AACN,CAAC,CAAC;AAGFvB,GAAG,CAACwB,MAAM,CAAC,IAAI,EAAE,MAAM;EACnBlB,OAAO,CAACE,GAAG,CAAC,6BAA6B,CAAC;AAC9C,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}